#pragma once
#include "Snack.h"

/*
* ЗАМЕЧАНИЕ ОТ МЕНЯ:
* Я ПРИМЕНИЛ АБСТРАКТНЫЙ ТИП ДАННЫХ СТЕК ДЛЯ РЕАЛИЗАЦИИ МЕХАНИКИ ЛОТКА, НУ С НЕКОТОРЫМИ ДОПОЛНИТЕЛЬНЫМИ ВОЗМОЖНОСТЯМИ. ИДЕЮ Я ПОЧЕРПНУЛ 
* ИЗ КНИГИ РОБЕРТА СЕДЖВИКА ФУНДАМЕНТАЛЬНЫЕ АЛГОРИТМЫ. МОЖНО БЫЛО БЫ СДЕЛАТЬ НЕ СТЕК, А FIFO, В ПРИНЦИПЕ КАК МНЕ СЕЙЧАС КАЖЕТСЯ 
* ОТ ЭТОГО МАЛО ЧТО ИЗМЕНИЛОСЬ БЫ, НО ТУТ НАДО ЕЩЁ ДУМАТЬ В КОНКРЕТНОМ СЛУЧАЕ, ЗАВИСИТ ОТ ФИЗИКИ ПРОЦЕССА. НО В ДАННОМ СЛУЧАЕ СТЕК ВЫГЛЯДИТ НАИБОЛЕЕ ЛОГИЧНО.
*/

class Slot
{
public:
	Slot(Type type);			//В конструкторе определяем под какой тип продуктов предназначен контейнер, продукты разложены каждый в свой контейнер
	Slot(Type type, int size);	//Здесь делаем конструктор, чтобы сразу заполнял полностью контейнер нужными снеками определенного типа, также определяем размер
	~Slot();					//Здесь деструктор обязателен, т.к. используются данные в куче
	void push(Snack* snack);	//Кладём продукт в самый низ контейнера, внутри будет вызван метод isFull() для проверки заполненности доверху
	Snack* pop();				//Забираем продукт с самого верха контейнера, то есть будет забран последний положенный, внутри будет вызван метод isEmpty()
	void top();					//Вывод в консоль информацию о продукте в лотке, который выйдет из него следующим
	Snack* top_ptr();			//Передать указатель на верхний объект (НО НЕ ВЫТАСКИВАТЬ)
	void display();				//Вывести в консоль содержимое контейнера
	int getFullness();			//посмотреть насколько заполнен лоток (он же контейнер, он же слот)
	void showFullness();		//Показать сколько в лотке продуктов по отношению к свободному месту
	bool isAlreadyHere(Snack* snack, int i);	//Проверяем не положен ли уже наш объект. 
												//Два раза положить одну конфету в лоток невозможно, как и нельзя два раза войти в одну реку
	bool isEmpty();						//Функция показывает, пуст ли данный лоток с продуктами
	bool isFull();						//Функция показывает, заполнен ли до отказа данный лоток с продуктами
	Type getType();
private:
	int size = 10;				//Размер слота, может содержать 10 единиц чего-то. Предполагаем, что размер по умолчинаю равен 10
	int current_snack = 0;		//Показывает, какой продукт вывалится из лотка следующим
	Snack** container;			//массив указателей на продукты, находящиеся в лотке
	static int ID_count;		//Счетчик количества созданных лотков, предполагается что лотки удаляться не будут, чтобы не перенумеровывать уже оставшиеся
	int ID;						//Номер текущего лотка
	Type container_type;		//Прописываем тип контейнера, для чего он предназначен

	//Эти методы лучше сделаем приватными, т.к. к ним обращаются только другие методы класса
	std::string ToString(Type type);	//Функция переводит Enum в String
};

